<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="css/style.css" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"
      crossorigin="anonymous"
    />
    <script src="jquery.js"></script>
    <script type="text/javascript" src="socket.io/socket.io.js"></script>
    <script
      type="text/javascript"
      src="https://cdnjs.cloudflare.com/ajax/libs/downloadjs/1.4.1/download.min.js"
    ></script>
    <script>
      // from client to server
      // const socket = io('http://localhost:4000/upload')
      // $(document).ready(() => {})

      // $(document).ready(() => {})
    </script>
  </head>
  <body>
    <%- include ("header") %>
    <div class="app">
      <div class="screen join-screen active">
        <div class="form">
          <!-- <h2>File sharing</h2> -->
          <!-- 
          <div class="form-input">
            <button id="sender-find-con-btn">Find</button>
          </div>

          <div class="form-input" id="file-name">
            <b>File name</b>
            <span>Filename</span>
          </div> -->

          <div class="form-input">
            <button id="sender-start-con-btn">Create room</button>
          </div>

          <div class="form-input" id="join-id">
            <!-- <b>Room ID</b>
            <span>000-000-000</span> -->
          </div>
        </div>
      </div>

      <div class="screen fs-screen">
        <div class="file-input">
          <label for="file-input">
            Click here to select files for sharing
          </label>
          <input type="file" id="file-input" />
        </div>

        <div class="files-list">
          <div class="title">Shared files:</div>

          <!-- <div class="item">
            <div class="progress">0%</div>
            <div class="filename">ABC.txt</div>
          </div> -->
        </div>
      </div>
    </div>

    <script type="text/javascript">
      ;(() => {
        let receiverID
        const socket = io()
        function generateID() {
          return `${Math.trunc(Math.random() * 999)}-${Math.trunc(
            Math.random() * 999
          )}-${Math.trunc(Math.random() * 999)}`
        }

        document
          .querySelector('#sender-start-con-btn')
          .addEventListener('click', () => {
            let joinID = generateID()
            document.querySelector('#join-id').innerHTML = `
            <b>Room ID<b/>
            <span>${joinID}</span>
        `
            socket.emit('sender-join', {
              uid: joinID,
            })
          })

        socket.on('init', (uid) => {
          receiverID = uid
          document.querySelector('.join-screen').classList.remove('active')
          document.querySelector('.fs-screen').classList.add('active')
        })

        document
          .querySelector('#file-input')
          .addEventListener('change', function (e) {
            let file = e.target.files[0]
            if (!file) {
              return
            }
            let reader = new FileReader()
            reader.onload = function (e) {
              let buffer = new Uint8Array(reader.result)
              let el = document.createElement('div')
              el.classList.add('item')
              el.innerHTML = `
                <div class="progress">0%</div>
               <div class="filename">${file.name}</div>
              `
              document.querySelector('.files-list').appendChild(el)
              shareFile(
                {
                  filename: file.name,
                  total_buffer_size: buffer.length,
                  buffer_size: 2048,
                },
                buffer,
                el.querySelector('.progress')
              )
            }
            reader.readAsArrayBuffer(file)
          })

        function shareFile(metadata, buffer, progress_node) {
          socket.emit('file-meta', {
            uid: receiverID,
            metadata: metadata,
          })

          socket.on('fs-share', () => {
            let chunk = buffer.slice(0, metadata.buffer_size)
            buffer = buffer.slice(metadata.buffer_size, buffer.length)
            progress_node.innerText =
              Math.trunc(
                (100 * (metadata.total_buffer_size - buffer.length)) /
                  metadata.total_buffer_size
              ) + '%'
            if (chunk.length != 0) {
              socket.emit('file-raw', {
                uid: receiverID,
                buffer: chunk,
              })
            }
          })
        }
      })()
    </script>
    <!-- <script type="text/javascript" src="controller.js"></script> -->
  </body>
</html>
